'use client';

import { LoginForm, RegisterForm } from '@/components/Auth';
import { useState } from 'react';

const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true);

  const toggleAuthMode = () => {
    setIsLogin((prevState) => !prevState);
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md">
        {isLogin ? (
          <LoginForm toggleAuthMode={toggleAuthMode} />
        ) : (
          <RegisterForm toggleAuthMode={toggleAuthMode} />
        )}
      </div>
    </div>
  );
};

export default AuthPage;

'use client';

import { ActivityFeed, PerformanceMetrics, QuickActions } from '@/components/Dashboard';

const DashboardPage = () => {
  return (
    <div className="flex flex-col gap-8 p-8">
      <PerformanceMetrics />
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <ActivityFeed />
        <QuickActions />
      </div>
    </div>
  );
};

export default DashboardPage;

'use client';

import { LeadList, LeadDetails, LeadForm } from '@/components/Leads';
import { useModal } from '@/hooks/useModal';

const LeadsPage = () => {
  const { isOpen, openModal, closeModal } = useModal();

  return (
    <div className="flex flex-col gap-8 p-8">
      <div className="flex justify-end">
        <button
          className="bg-blue-500 text-white px-4 py-2 rounded-md"
          onClick={openModal}
        >
          Add Lead
        </button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <LeadList />
        <LeadDetails />
      </div>
      <LeadForm isOpen={isOpen} closeModal={closeModal} />
    </div>
  );
};

export default LeadsPage;



'use client';

import { SalesReport, PipelineReport, TeamPerformance } from '@/components/Reports';

const ReportsPage = () => {
  return (
    <div className="flex flex-col gap-8 p-8">
      <SalesReport />
      <PipelineReport />
      <TeamPerformance />
    </div>
  );
};

export default ReportsPage;

'use client';

import { UserProfile, Preferences, Integrations } from '@/components/Settings';

const SettingsPage = () => {
  return (
    <div className="flex flex-col gap-8 p-8">
      <UserProfile />
      <Preferences />
      <Integrations />
    </div>
  );
};

export default SettingsPage;

'use client';

import { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { Button, Spinner } from '@/components/UI';
import { AiOutlineMail, AiOutlineLock } from 'react-icons/ai';

interface LoginFormProps {
  toggleAuthMode: () => void;
}

const LoginForm = ({ toggleAuthMode }: LoginFormProps) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login, isLoading, error } = useAuth();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    await login(email, password);
  };

  return (
    <div className="max-w-md mx-auto">
      <h2 className="text-2xl font-bold mb-4">Login</h2>
      <form onSubmit={handleLogin}>
        <div className="mb-4">
          <label htmlFor="email" className="block font-bold mb-2">
            Email
          </label>
          <div className="relative">
            <AiOutlineMail className="absolute left-3 top-3 text-gray-400" />
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-10 py-3 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
        </div>
        <div className="mb-4">
          <label htmlFor="password" className="block font-bold mb-2">
            Password
          </label>
          <div className="relative">
            <AiOutlineLock className="absolute left-3 top-3 text-gray-400" />
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-10 py-3 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
        </div>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        <div className="flex justify-between items-center">
          <Button type="submit" disabled={isLoading}>
            {isLoading ? <Spinner /> : 'Login'}
          </Button>
          <button
            type="button"
            className="text-blue-500 hover:underline"
            onClick={toggleAuthMode}
          >
            Register
          </button>
        </div>
      </form>
    </div>
  );
};

export default LoginForm;


'use client';

import { useState } from 'react';
import { Button, Spinner } from '@/components/UI';
import { AiOutlineMail } from 'react-icons/ai';
import { useAuth } from '@/hooks/useAuth';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const { resetPassword, isLoading, error } = useAuth();

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    await resetPassword(email);
  };

  return (
    <div className="max-w-md mx-auto">
      <h2 className="text-2xl font-bold mb-4">Reset Password</h2>
      <form onSubmit={handleResetPassword}>
        <div className="mb-4">
          <label htmlFor="email" className="block font-bold mb-2">
            Email
          </label>
          <div className="relative">
            <AiOutlineMail className="absolute left-3 top-3 text-gray-400" />
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-10 py-3 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
        </div>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        <Button type="submit" disabled={isLoading}>
          {isLoading ? <Spinner /> : 'Reset Password'}
        </Button>
      </form>
    </div>
  );
};

export default ForgotPassword;

'use client';

import { FaRegCommentAlt } from 'react-icons/fa';
import { IoIosCall } from 'react-icons/io';
import { MdEmail } from 'react-icons/md';

const ActivityFeed = () => {
  return (
    <div className="bg-white rounded-md shadow-md p-6">
      <h2 className="text-xl font-bold mb-4">Activity Feed</h2>
      <div className="flex flex-col gap-4">
        <div className="bg-gray-100 p-4 rounded-md">
          <div className="flex items-center gap-2 mb-2">
            <FaRegCommentAlt className="text-blue-500" />
            <span className="font-bold">New Note</span>
          </div>
          <p>
            You added a new note to the lead "Acme Inc." regarding their product
            interest.
          </p>
        </div>
        <div className="bg-gray-100 p-4 rounded-md">
          <div className="flex items-center gap-2 mb-2">
            <IoIosCall className="text-green-500" />
            <span className="font-bold">Scheduled Call</span>
          </div>
          <p>
            You scheduled a call with "Widget Co." for next Tuesday to discuss
            their requirements.
          </p>
        </div>
        <div className="bg-gray-100 p-4 rounded-md">
          <div className="flex items-center gap-2 mb-2">
            <MdEmail className="text-red-500" />
            <span className="font-bold">New Email</span>
          </div>
          <p>
            You received an email from "Gadget Solutions" regarding their
            interest in your services.
          </p>
        </div>
      </div>
    </div>
  );
};

export default ActivityFeed;

'use client';

import { FaChartLine, FaChartPie, FaChartBar } from 'react-icons/fa';

const PerformanceMetrics = () => {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
      <div className="bg-white rounded-md shadow-md p-6 flex flex-col items-center">
        <FaChartLine className="text-blue-500 text-4xl mb-2" />
        <h3 className="text-xl font-bold mb-1">Revenue Growth</h3>
        <p className="text-gray-600">25% increase from last quarter</p>
      </div>
      <div className="bg-white rounded-md shadow-md p-6 flex flex-col items-center">
        <FaChartPie className="text-green-500 text-4xl mb-2" />
        <h3 className="text-xl font-bold mb-1">Deal Conversion</h3>
        <p className="text-gray-600">40% conversion rate</p>
      </div>
      <div className="bg-white rounded-md shadow-md p-6 flex flex-col items-center">
        <FaChartBar className="text-red-500 text-4xl mb-2" />
        <h3 className="text-xl font-bold mb-1">Sales Pipeline</h3>
        <p className="text-gray-600">$2M in potential deals</p>
      </div>
    </div>
  );
};

export default PerformanceMetrics;

'use client';

import { FaPlus, FaUserPlus, FaCalendarAlt } from 'react-icons/fa';
import { IoMdCreate } from 'react-icons/io';

const QuickActions = () => {
  return (
    <div className="bg-white rounded-md shadow-md p-6">
      <h2 className="text-xl font-bold mb-4">Quick Actions</h2>
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-blue-500 text-white p-4 rounded-md flex flex-col items-center justify-center cursor-pointer hover:bg-blue-600 transition-colors">
          <FaPlus className="text-2xl mb-2" />
          <span>Add Lead</span>
        </div>
        <div className="bg-green-500 text-white p-4 rounded-md flex flex-col items-center justify-center cursor-pointer hover:bg-green-600 transition-colors">
          <FaUserPlus className="text-2xl mb-2" />
          <span>Add Contact</span>
        </div>
        <div className="bg-yellow-500 text-white p-4 rounded-md flex flex-col items-center justify-center cursor-pointer hover:bg-yellow-600 transition-colors">
          <IoMdCreate className="text-2xl mb-2" />
          <span>Create Deal</span>
        </div>
        <div className="bg-red-500 text-white p-4 rounded-md flex flex-col items-center justify-center cursor-pointer hover:bg-red-600 transition-colors">
          <FaCalendarAlt className="text-2xl mb-2" />
          <span>Schedule Meeting</span>
        </div>
      </div>
    </div>
  );
};

export default QuickActions;

'use client';

import { useEffect, useState } from 'react';
import { leadService } from '@/services/lead.service';
import { Lead } from '@/types';
import { Spinner } from '@/components/UI';
import { useInfiniteScroll } from '@/hooks/useInfiniteScroll';

const LeadList = () => {
  const [leads, setLeads] = useState<Lead[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);

  const { loadMore, isLoadingMore } = useInfiniteScroll(fetchLeads);

  useEffect(() => {
    fetchLeads();
  }, []);

  const fetchLeads = async () => {
    setIsLoading(true);
    try {
      const response = await leadService.getLeads();
      setLeads((prevLeads) => [...prevLeads, ...response.data]);
      setHasMore(response.hasMore);
    } catch (error) {
      console.error('Error fetching leads:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-md shadow-md p-6">
      <h2 className="text-xl font-bold mb-4">Leads</h2>
      {isLoading ? (
        <div className="flex justify-center">
          <Spinner />
        </div>
      ) : (
        <ul>
          {leads.map((lead) => (
            <li key={lead.id} className="py-2 border-b border-gray-200">
              {lead.name}
            </li>
          ))}
        </ul>
      )}
      {hasMore && (
        <div className="flex justify-center mt-4">
          <button
            className="bg-blue-500 text-white px-4 py-2 rounded-md"
            onClick={loadMore}
            disabled={is